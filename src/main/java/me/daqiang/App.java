/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.daqiang;


import java.util.stream.IntStream;
import me.daqiang.entity.Message;
import me.daqiang.reactor.Combine;
import me.daqiang.utils.enums.EnumTest;
import me.daqiang.utils.enums.Spiciness;
import me.daqiang.utils.json.JsonCode;
import org.hashids.Hashids;
import org.jetbrains.annotations.NotNull;
import org.reactivestreams.Subscription;
import reactor.core.CoreSubscriber;
import reactor.core.publisher.Flux;

import java.io.IOException;
import java.lang.reflect.Array;
import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Consumer;
import java.util.stream.Collectors;


public class App {

    public String getGreeting() {
        return "Hello world.";
    }
    static void testMyBaitis() {
        System.out.println(new App().getGreeting());

        WeekDay day = WeekDay.FRI;

        switch (day) {
            case FRI:
                System.out.println("唉！又是" + day.getDes() + "要上班呢！");
                break;
            case SUN:
                System.out.println("哇！今天是" + day.getDes() + "哎！");
                break;
        }

        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(1000);
                        System.out.println("----->>>");
                        try {
//            new MyBaitisRunner().testSaveUser();
//                            new MyBaitisRunner().getAllUsers();
                            new MyBaitisRunner().updateUserInfo(user -> {
                                if (user.getId() == 1) {
                                    user.setUser_name("daqiang" + user.getId());
                                    return user;
                                } else {
                                    return null;
                                }
                            });
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    } catch (Exception e) {
                        System.out.println(e);
                    }

                }
            }
        }).run();


        try {
            Thread.sleep(1000000);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    static void testReactor() {
        //1. 静态创建
        Flux.just("Hello", "World!").subscribe(System.out::println);
        System.out.println("============1");
        Flux.fromArray(new Integer[] {1, 2, 3}).subscribe(System.out::println);
        System.out.println("============2");
        Flux.empty().subscribe(System.out::println);
        System.out.println("============3");
        Flux.range(2, 5).subscribe(System.out::println);
        System.out.println("============4");

        //2. 动态创建
        Flux.generate(sink -> {
            sink.next(new App());
            sink.complete();
        }).subscribe(System.out::println);
        System.out.println("============5");

        Flux.create(fluxSink -> {
            for (int i = 0; i < 10; i++) {
                fluxSink.next(i);
            }
        }).subscribe(System.out::println);
    }

    static void reactorOperator() {
        Flux.merge(Combine.uplodImgToOSS(), Combine.updateUserInfo()).subscribe(System.out::println);
    }



    public static void main(String[] args) throws Exception {

        List<String> arr = new ArrayList<>(){{
            add("lQvdj8");
            add("rJgb9l");
            add("8gonP8");
            add("lMgoN5");
            add("rYkqd8");
            add("l1y6Ml");
            add("rYqz6r");
            add("l9vky8");
            add("8PDDY8");
            add("5Av37r");
            add("lOxYq8");
            add("l14wnr");
            add("lOwJel");
            add("r2Dwv8");
            add("rDRqv8");
            add("lOMoJe");
            add("5awKvl");
            add("8mqER8");
            add("rqgXD8");
            add("ldVNX5");
            add("rz3pdl");
            add("54vAQl");
            add("57vQQ8");
            add("l1Bbn8");
            add("lvPVZ5");
            add("rDRqv8");
            add("8mq0Q8");
            add("8goM28");
            add("rw0zml");
            add("l3vY7r");
        }};

        arr.stream().forEach(item -> {
            System.out.println(item + ":" + HashUtils.decode(item));
        });


//        System.out.println(HashUtils.encode(11584));


//        System.out.println(LocalDateTime.now());
//        Map<String, Object> maps = new HashMap<>();
//        maps.put("name", "daqiang");
//        maps.put("age", 123);
//
//        maps.forEach((k,v) -> {
//            System.out.println(k);
//            System.out.println(v);
//        });
//
//        maps.entrySet().forEach(e -> {
//            System.out.println(e.getKey());
//            System.out.println(e.getValue());
//        });
//
//       System.out.println(Arrays.asList(1, 1, 2).stream().distinct().collect(Collectors.toList()));

//        new JsonCode().json2Object();
//        new JsonCode().json2Map2Object();
//        testMyBaitis();
//        App.testReactor();
//        Executor.testTheradWork();
//        Executor.noReturnValueTask();
//        Executor.returnValueTest();
//        Executor.fixedPool();
//        Executor.singleQueue();
//        Executor.joineThreadTest();
//        Executor.responsiveTest();

//        Executor.exceptionTest();
//        Executor.sharedResAccess();
//        Executor.threadLocalTest();

//        new BlockTest().thinkJavaTest();

//        UserCaseTracker.test();

//        EnumTest.testEnums();
//        System.out.println(new LibProvider("daqiang father").getFirstProperty());

//        reactorOperator();

//        List<String> names = new ArrayList<>();
//        names.add("daqiang");
//        names.add("zhangboqian");
//        names.add("renhaizhou");
//        names.add("dongkewei");
//        names.add("madi");
//
//        List<Integer> results = names.stream().filter(s -> s.contains("da")).map(s -> names.indexOf(s)).collect(Collectors.toList());
//        System.out.println(results);
//
//        System.out.println("Main Thread End!========" );

    }



}

 class HashUtils {

    private static Hashids hashids = new Hashids("xzl salt", 6);

    public static String encode(long id) {
        return hashids.encode(id);
    }

    public static long decode(String str) {
        if (str == null || str.isEmpty()) {
        }
        try {
            return hashids.decode(str)[0];
        } catch (Exception e) {
            return -1;
        }
    }
}

class MySubscriber implements CoreSubscriber<Integer>, Consumer<Integer> {

    private Subscription s;

    @Override
    public void onSubscribe(Subscription s) {
        this.s = s;
    }

    @Override
    public void onNext(Integer o) {
        this.s.request(1);
        System.out.print(o);
    }

    @Override
    public void onError(Throwable t) {

    }

    @Override
    public void onComplete() {

    }

    @Override
    public void accept(Integer s) {
        this.s.request(1);
    }
}


/**
 * Date: 16/8/19 Time: AM12:48
 *
 * @author Gan Dong
 */
